/* plank-internal.h generated by valac 0.20.1.4-f5a54, the Vala compiler, do not modify */


#ifndef __PLANK_INTERNAL_H__
#define __PLANK_INTERNAL_H__

#include <glib.h>
#include <glib-object.h>
#include <gee.h>
#include <libbamf/libbamf.h>
#include <stdlib.h>
#include <string.h>
#include <gdk-pixbuf/gdk-pixbuf.h>
#include <libwnck/libwnck.h>
#include <gdk/gdk.h>

G_BEGIN_DECLS


#define SHELF_SERVICES_WINDOWS_TYPE_MATCHER (shelf_services_windows_matcher_get_type ())
#define SHELF_SERVICES_WINDOWS_MATCHER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SHELF_SERVICES_WINDOWS_TYPE_MATCHER, ShelfServicesWindowsMatcher))
#define SHELF_SERVICES_WINDOWS_MATCHER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SHELF_SERVICES_WINDOWS_TYPE_MATCHER, ShelfServicesWindowsMatcherClass))
#define SHELF_SERVICES_WINDOWS_IS_MATCHER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SHELF_SERVICES_WINDOWS_TYPE_MATCHER))
#define SHELF_SERVICES_WINDOWS_IS_MATCHER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SHELF_SERVICES_WINDOWS_TYPE_MATCHER))
#define SHELF_SERVICES_WINDOWS_MATCHER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SHELF_SERVICES_WINDOWS_TYPE_MATCHER, ShelfServicesWindowsMatcherClass))

typedef struct _ShelfServicesWindowsMatcher ShelfServicesWindowsMatcher;
typedef struct _ShelfServicesWindowsMatcherClass ShelfServicesWindowsMatcherClass;
typedef struct _ShelfServicesWindowsMatcherPrivate ShelfServicesWindowsMatcherPrivate;

#define SHELF_SERVICES_WINDOWS_TYPE_STRUTS (shelf_services_windows_struts_get_type ())

#define SHELF_SERVICES_WINDOWS_TYPE_WINDOW_CONTROL (shelf_services_windows_window_control_get_type ())
#define SHELF_SERVICES_WINDOWS_WINDOW_CONTROL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SHELF_SERVICES_WINDOWS_TYPE_WINDOW_CONTROL, ShelfServicesWindowsWindowControl))
#define SHELF_SERVICES_WINDOWS_WINDOW_CONTROL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SHELF_SERVICES_WINDOWS_TYPE_WINDOW_CONTROL, ShelfServicesWindowsWindowControlClass))
#define SHELF_SERVICES_WINDOWS_IS_WINDOW_CONTROL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SHELF_SERVICES_WINDOWS_TYPE_WINDOW_CONTROL))
#define SHELF_SERVICES_WINDOWS_IS_WINDOW_CONTROL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SHELF_SERVICES_WINDOWS_TYPE_WINDOW_CONTROL))
#define SHELF_SERVICES_WINDOWS_WINDOW_CONTROL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SHELF_SERVICES_WINDOWS_TYPE_WINDOW_CONTROL, ShelfServicesWindowsWindowControlClass))

typedef struct _ShelfServicesWindowsWindowControl ShelfServicesWindowsWindowControl;
typedef struct _ShelfServicesWindowsWindowControlClass ShelfServicesWindowsWindowControlClass;
typedef struct _ShelfServicesWindowsWindowControlPrivate ShelfServicesWindowsWindowControlPrivate;

struct _ShelfServicesWindowsMatcher {
	GObject parent_instance;
	ShelfServicesWindowsMatcherPrivate * priv;
};

struct _ShelfServicesWindowsMatcherClass {
	GObjectClass parent_class;
};

typedef enum  {
	SHELF_SERVICES_WINDOWS_STRUTS_LEFT,
	SHELF_SERVICES_WINDOWS_STRUTS_RIGHT,
	SHELF_SERVICES_WINDOWS_STRUTS_TOP,
	SHELF_SERVICES_WINDOWS_STRUTS_BOTTOM,
	SHELF_SERVICES_WINDOWS_STRUTS_LEFT_START,
	SHELF_SERVICES_WINDOWS_STRUTS_LEFT_END,
	SHELF_SERVICES_WINDOWS_STRUTS_RIGHT_START,
	SHELF_SERVICES_WINDOWS_STRUTS_RIGHT_END,
	SHELF_SERVICES_WINDOWS_STRUTS_TOP_START,
	SHELF_SERVICES_WINDOWS_STRUTS_TOP_END,
	SHELF_SERVICES_WINDOWS_STRUTS_BOTTOM_START,
	SHELF_SERVICES_WINDOWS_STRUTS_BOTTOM_END,
	SHELF_SERVICES_WINDOWS_STRUTS_N_VALUES
} ShelfServicesWindowsStruts;

struct _ShelfServicesWindowsWindowControl {
	GObject parent_instance;
	ShelfServicesWindowsWindowControlPrivate * priv;
};

struct _ShelfServicesWindowsWindowControlClass {
	GObjectClass parent_class;
};


GType shelf_services_windows_matcher_get_type (void) G_GNUC_CONST;
ShelfServicesWindowsMatcher* shelf_services_windows_matcher_get_default (void);
GeeArrayList* shelf_services_windows_matcher_active_launchers (ShelfServicesWindowsMatcher* self);
BamfApplication* shelf_services_windows_matcher_app_for_uri (ShelfServicesWindowsMatcher* self, const gchar* uri);
void shelf_services_windows_matcher_set_favorites (ShelfServicesWindowsMatcher* self, GeeArrayList* favs);
GType shelf_services_windows_struts_get_type (void) G_GNUC_CONST;
GType shelf_services_windows_window_control_get_type (void) G_GNUC_CONST;
#define SHELF_SERVICES_WINDOWS_WINDOW_CONTROL_WINDOW_GROUP_DELAY ((guint) 10000)
#define SHELF_SERVICES_WINDOWS_WINDOW_CONTROL_VIEWPORT_CHANGE_DELAY ((guint) 200)
void shelf_services_windows_window_control_initialize (void);
GdkPixbuf* shelf_services_windows_window_control_get_app_icon (BamfApplication* app);
GdkPixbuf* shelf_services_windows_window_control_get_window_icon (BamfWindow* window);
guint shelf_services_windows_window_control_get_num_windows (BamfApplication* app);
gboolean shelf_services_windows_window_control_has_maximized_window (BamfApplication* app);
gboolean shelf_services_windows_window_control_has_minimized_window (BamfApplication* app);
gboolean shelf_services_windows_window_control_has_window_on_workspace (BamfApplication* app, WnckWorkspace* workspace);
GeeArrayList* shelf_services_windows_window_control_get_windows (BamfApplication* app);
void shelf_services_windows_window_control_update_icon_regions (BamfApplication* app, GdkRectangle* rect);
void shelf_services_windows_window_control_close_all (BamfApplication* app);
void shelf_services_windows_window_control_focus_window (BamfWindow* window);
void shelf_services_windows_window_control_focus_window_by_xid (guint32 xid);
void shelf_services_windows_window_control_focus (BamfApplication* app);
void shelf_services_windows_window_control_focus_previous (BamfApplication* app);
void shelf_services_windows_window_control_focus_next (BamfApplication* app);
void shelf_services_windows_window_control_minimize (BamfApplication* app);
void shelf_services_windows_window_control_restore (BamfApplication* app);
void shelf_services_windows_window_control_maximize (BamfApplication* app);
void shelf_services_windows_window_control_unmaximize (BamfApplication* app);
GeeArrayList* shelf_services_windows_window_control_get_ordered_window_stack (BamfApplication* app);
void shelf_services_windows_window_control_smart_focus (BamfApplication* app);
void shelf_services_windows_window_control_get_easy_geometry (WnckWindow* w, GdkRectangle* result);


G_END_DECLS

#endif
