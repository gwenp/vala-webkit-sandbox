/* plank-internal.vapi generated by valac 0.20.1.4-f5a54, do not modify. */

namespace Plank {
	namespace Services {
		namespace Windows {
			[CCode (cheader_filename = "plank-internal.h")]
			public class Matcher : GLib.Object {
				public Gee.ArrayList<Bamf.Application> active_launchers ();
				public Bamf.Application? app_for_uri (string uri);
				public static Plank.Services.Windows.Matcher get_default ();
				public void set_favorites (Gee.ArrayList<string> favs);
				public signal void app_changed (Bamf.Application? old_app, Bamf.Application? new_app);
				public signal void app_closed (Bamf.Application app);
				public signal void app_opened (Bamf.Application app);
				public signal void window_changed (Bamf.Window? old_win, Bamf.Window? new_win);
				public signal void window_closed (Bamf.Window w);
				public signal void window_opened (Bamf.Window w);
			}
			[CCode (cheader_filename = "plank-internal.h")]
			public class WindowControl : GLib.Object {
				public const uint VIEWPORT_CHANGE_DELAY;
				public const uint WINDOW_GROUP_DELAY;
				public static void close_all (Bamf.Application app);
				public static void focus (Bamf.Application app);
				public static void focus_next (Bamf.Application app);
				public static void focus_previous (Bamf.Application app);
				public static void focus_window (Bamf.Window window);
				public static void focus_window_by_xid (uint32 xid);
				public static unowned Gdk.Pixbuf? get_app_icon (Bamf.Application app);
				public static Gdk.Rectangle get_easy_geometry (Wnck.Window w);
				public static uint get_num_windows (Bamf.Application app);
				public static Gee.ArrayList<Wnck.Window> get_ordered_window_stack (Bamf.Application app);
				public static unowned Gdk.Pixbuf? get_window_icon (Bamf.Window window);
				public static Gee.ArrayList<Bamf.Window> get_windows (Bamf.Application app);
				public static bool has_maximized_window (Bamf.Application app);
				public static bool has_minimized_window (Bamf.Application app);
				public static bool has_window_on_workspace (Bamf.Application app, Wnck.Workspace workspace);
				public static void initialize ();
				public static void maximize (Bamf.Application app);
				public static void minimize (Bamf.Application app);
				public static void restore (Bamf.Application app);
				public static void smart_focus (Bamf.Application app);
				public static void unmaximize (Bamf.Application app);
				public static void update_icon_regions (Bamf.Application app, Gdk.Rectangle rect);
			}
			[CCode (cheader_filename = "plank-internal.h")]
			public enum Struts {
				LEFT,
				RIGHT,
				TOP,
				BOTTOM,
				LEFT_START,
				LEFT_END,
				RIGHT_START,
				RIGHT_END,
				TOP_START,
				TOP_END,
				BOTTOM_START,
				BOTTOM_END,
				N_VALUES
			}
		}
	}
}
